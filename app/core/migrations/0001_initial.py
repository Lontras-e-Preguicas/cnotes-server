# Generated by Django 3.1.6 on 2021-02-12 19:20

import core.models.user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('bio', models.CharField(blank=True, help_text='Pequena descrição pública do usuário.', max_length=360, null=True, verbose_name='bio')),
                ('profile_picture', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format=None, help_text='Imagem de perfil do usuário.', keep_meta=True, null=True, quality=75, size=[512, 512], upload_to=core.models.user.profile_picture_path, verbose_name='foto de perfil')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se a conta do usuário está ativa.', verbose_name='ativo')),
                ('is_staff', models.BooleanField(default=False, help_text='Indica se o usuário é um administrador do sistema.', verbose_name='staff')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
            },
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título do caderno.', max_length=255, verbose_name='título')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Data de criação do caderno.', verbose_name='data de criação')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'caderno',
                'verbose_name_plural': 'cadernos',
            },
        ),
    ]
