# Generated by Django 3.1.6 on 2021-03-16 01:58

import core.models.user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django_resized.forms
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255, verbose_name='nome')),
                ('bio', models.CharField(blank=True, default='', help_text='Pequena descrição pública do usuário.', max_length=360, verbose_name='bio')),
                ('profile_picture', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format=None, help_text='Imagem de perfil do usuário.', keep_meta=True, null=True, quality=75, size=[512, 512], upload_to=core.models.user.profile_picture_path, verbose_name='foto de perfil')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se a conta do usuário está ativa.', verbose_name='ativo')),
                ('is_staff', models.BooleanField(default=False, help_text='Indica se o usuário é um administrador do sistema.', verbose_name='staff')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'usuário',
                'verbose_name_plural': 'usuários',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título da pasta.', max_length=255, verbose_name='título')),
            ],
            options={
                'verbose_name': 'pasta',
                'verbose_name_plural': 'pastas',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('member', 'membro'), ('mod', 'moderador'), ('admin', 'administrador')], default='member', help_text='Papel desempenhado pelo membro dentro do caderno', max_length=6)),
                ('member_since', models.DateTimeField(auto_now_add=True, help_text='Data de entrada do membro no caderno', verbose_name='data de entrada')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o usuário ainda é membro do caderno', verbose_name='ativo')),
                ('is_banned', models.BooleanField(default=False, help_text='Indica se o membro está banido', verbose_name='banido')),
            ],
            options={
                'verbose_name': 'membro',
                'verbose_name_plural': 'membros',
            },
        ),
        migrations.CreateModel(
            name='NoteGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título do conjunto.', max_length=255, verbose_name='título')),
                ('parent_folder', models.ForeignKey(help_text='Pasta em que este conjunto se localiza', on_delete=django.db.models.deletion.CASCADE, related_name='note_groups', related_query_name='note_group', to='core.folder', verbose_name='pasta pai')),
            ],
            options={
                'verbose_name': 'conjunto de anotação',
                'verbose_name_plural': 'conjunto de anotações',
            },
        ),
        migrations.CreateModel(
            name='Notebook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título do caderno.', max_length=255, verbose_name='título')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Data de criação do caderno.', verbose_name='data de criação')),
                ('owner', models.ForeignKey(help_text='Atual dono do caderno.', on_delete=django.db.models.deletion.CASCADE, related_name='notebooks', related_query_name='notebook', to=settings.AUTH_USER_MODEL, verbose_name='dono')),
            ],
            options={
                'verbose_name': 'caderno',
                'verbose_name_plural': 'cadernos',
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título da anotação.', max_length=255, verbose_name='título')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Data de criação da anotação.', verbose_name='data de criação')),
                ('content', models.TextField(blank=True, help_text='Conteúdo da anotação.', verbose_name='conteúdo')),
                ('last_edited', models.DateTimeField(auto_now=True, help_text='Indica o momento da última edição.', verbose_name='momento da última edição')),
                ('author', models.ForeignKey(help_text='Autor da anotação.', on_delete=django.db.models.deletion.CASCADE, related_name='notes', related_query_name='note', to='core.member', verbose_name='autor')),
                ('last_edited_by', models.ForeignKey(default=None, help_text='Indica quem realizou a última edição.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.member', verbose_name='última edição por')),
                ('note_group', models.ForeignKey(help_text='Conjunto de anotações onde a anotação está contida.', on_delete=django.db.models.deletion.CASCADE, related_name='notes', related_query_name='note', to='core.notegroup', verbose_name='conjunto de anotações')),
            ],
            options={
                'verbose_name': 'anotação',
                'verbose_name_plural': 'anotações',
            },
        ),
        migrations.AddField(
            model_name='member',
            name='notebook',
            field=models.ForeignKey(help_text='Caderno no qual o usuário é membro', on_delete=django.db.models.deletion.CASCADE, related_name='members', related_query_name='member', to='core.notebook', verbose_name='caderno'),
        ),
        migrations.AddField(
            model_name='member',
            name='user',
            field=models.ForeignKey(help_text='Usuário membro de um caderno', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', related_query_name='membership', to=settings.AUTH_USER_MODEL, verbose_name='usuário'),
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('invite_date', models.DateTimeField(auto_now_add=True, help_text='Data do envio do convite para um usuário', verbose_name='data do convite')),
                ('receiver', models.ForeignKey(help_text='Usuário destinatário do convite', on_delete=django.db.models.deletion.CASCADE, related_name='invites', related_query_name='invite', to=settings.AUTH_USER_MODEL, verbose_name='destinatário')),
                ('sender', models.ForeignKey(help_text='Usuário remetente do convite', on_delete=django.db.models.deletion.CASCADE, related_name='invites_sent', related_query_name='invite_sent', to='core.member', verbose_name='remetente')),
            ],
            options={
                'verbose_name': 'convite',
                'verbose_name_plural': 'convites',
            },
        ),
        migrations.AddField(
            model_name='folder',
            name='notebook',
            field=models.ForeignKey(help_text='Caderno onde a pasta se localiza.', on_delete=django.db.models.deletion.CASCADE, related_name='folders', related_query_name='folder', to='core.notebook', verbose_name='caderno'),
        ),
        migrations.AddField(
            model_name='folder',
            name='parent_folder',
            field=models.ForeignKey(blank=True, help_text='Pasta em que esta pasta se localiza, em caso de nulo, pasta raiz.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sub_folders', related_query_name='sub_folder', to='core.folder', verbose_name='pasta pai'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('message', models.CharField(help_text='Conteúdo do comentário.', max_length=1023, verbose_name='mensagem')),
                ('creation_date', models.DateTimeField(auto_now_add=True, help_text='Data de criação do comentário.', verbose_name='data de criação')),
                ('solved', models.BooleanField(default=False, help_text='Indicativo de que o comentário já foi resolvido', verbose_name='resolvido')),
                ('commenter', models.ForeignKey(editable=False, help_text='Autor do comentário.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='core.member', verbose_name='comentarista')),
                ('note', models.ForeignKey(editable=False, help_text='Anotação comentada.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', related_query_name='comment', to='core.note', verbose_name='anotação')),
            ],
            options={
                'verbose_name': 'comentário',
                'verbose_name_plural': 'comentários',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Título da atividade', max_length=255, verbose_name='título')),
                ('description', models.CharField(help_text='Descrição da atividade', max_length=255, verbose_name='descrição')),
                ('is_viewed', models.BooleanField(default=False, help_text='Indica se a atividade foi vista', verbose_name='visto')),
                ('user', models.ForeignKey(help_text='Usuário que verá suas atividades', on_delete=django.db.models.deletion.CASCADE, related_name='activities', related_query_name='activity', to=settings.AUTH_USER_MODEL, verbose_name='usuário')),
            ],
            options={
                'verbose_name': 'atividade',
                'verbose_name_plural': 'atividades',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='ID único seguindo o padrão UUID4.', primary_key=True, serialize=False)),
                ('rating', models.IntegerField(help_text='Valor da avaliação dada.', verbose_name='avaliação')),
                ('rated_date', models.DateTimeField(auto_now=True, help_text='Data da avaliação.', verbose_name='data da avaliação')),
                ('note', models.ForeignKey(help_text='Anotação avaliada.', on_delete=django.db.models.deletion.CASCADE, related_name='ratings', related_query_name='rating', to='core.note', verbose_name='anotação')),
                ('rater', models.ForeignKey(help_text='Autor da avaliação.', on_delete=django.db.models.deletion.CASCADE, related_name='rates', related_query_name='rate', to='core.member', verbose_name='avaliador')),
            ],
            options={
                'verbose_name': 'avaliação',
                'verbose_name_plural': 'avaliações',
                'unique_together': {('note', 'rater')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('user', 'notebook')},
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.UniqueConstraint(condition=models.Q(parent_folder=None), fields=('notebook',), name='unique_parent_folder'),
        ),
        migrations.AddConstraint(
            model_name='folder',
            constraint=models.CheckConstraint(check=models.Q(_negated=True, id=django.db.models.expressions.F('parent_folder')), name='no_self_reference'),
        ),
    ]
